// <auto-generated />
// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

// Make sure the compiler doesn't complain about missing Xml comments
#pragma warning disable 1591
#region T4MVC

using System;
using System.Diagnostics;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Hosting;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class MVC
{
    public static ByteCarrot.Masslog.Web.Controllers.Account.AccountController Account = new ByteCarrot.Masslog.Web.Controllers.Account.T4MVC_AccountController();
    public static ByteCarrot.Masslog.Web.Controllers.Activities.ActivitiesController Activities = new ByteCarrot.Masslog.Web.Controllers.Activities.T4MVC_ActivitiesController();
    public static ByteCarrot.Masslog.Web.Controllers.Activities.ActivityController Activity = new ByteCarrot.Masslog.Web.Controllers.Activities.T4MVC_ActivityController();
    public static ByteCarrot.Masslog.Web.Controllers.Applications.ApplicationController Application = new ByteCarrot.Masslog.Web.Controllers.Applications.T4MVC_ApplicationController();
    public static ByteCarrot.Masslog.Web.Controllers.Applications.LoggingRulesController LoggingRules = new ByteCarrot.Masslog.Web.Controllers.Applications.T4MVC_LoggingRulesController();
    public static ByteCarrot.Masslog.Web.Controllers.Configuration.SmtpConfigurationController SmtpConfiguration = new ByteCarrot.Masslog.Web.Controllers.Configuration.T4MVC_SmtpConfigurationController();
    public static ByteCarrot.Masslog.Web.Controllers.Home.HomeController Home = new ByteCarrot.Masslog.Web.Controllers.Home.T4MVC_HomeController();
    public static T4MVC.InfrastructureController Infrastructure = new T4MVC.InfrastructureController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}

namespace T4MVC
{
}

namespace T4MVC
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public class Dummy
    {
        private Dummy() { }
        public static Dummy Instance = new Dummy();
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_ActionResult : System.Web.Mvc.ActionResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_ActionResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_PartialViewResult : System.Web.Mvc.PartialViewResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_PartialViewResult(string area, string controller, string action, string protocol = null): base()
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}
[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public class T4MVC_System_Web_Mvc_RedirectToRouteResult : System.Web.Mvc.RedirectToRouteResult, IT4MVCActionResult
{
    public T4MVC_System_Web_Mvc_RedirectToRouteResult(string area, string controller, string action, string protocol = null): base(" ", default(System.Web.Routing.RouteValueDictionary), default(bool))
    {
        this.InitMVCT4Result(area, controller, action, protocol);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public string Protocol { get; set; }
    public RouteValueDictionary RouteValueDictionary { get; set; }
}



namespace Links
{
    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Scripts {
        private const string URLPATH = "~/Scripts";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_datetimepicker_min_js = Url("bootstrap-datetimepicker.min.js");
        public static readonly string bootstrap_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.js") ? Url("bootstrap.min.js") : Url("bootstrap.js");
                      
        public static readonly string bootstrap_min_js = Url("bootstrap.min.js");
        public static readonly string codemirror_highlighting_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/codemirror.highlighting.min.js") ? Url("codemirror.highlighting.min.js") : Url("codemirror.highlighting.js");
                      
        public static readonly string codemirror_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/codemirror.min.js") ? Url("codemirror.min.js") : Url("codemirror.js");
                      
        public static readonly string datajo_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/datajo.min.js") ? Url("datajo.min.js") : Url("datajo.js");
                      
        public static readonly string datajo_js_map = Url("datajo.js.map");
        public static readonly string datajo_min_js = Url("datajo.min.js");
        public static readonly string datajo_ts = Url("datajo.ts");
        public static readonly string jquery_1_8_3_intellisense_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.3.intellisense.min.js") ? Url("jquery-1.8.3.intellisense.min.js") : Url("jquery-1.8.3.intellisense.js");
                      
        public static readonly string jquery_1_8_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery-1.8.3.min.js") ? Url("jquery-1.8.3.min.js") : Url("jquery-1.8.3.js");
                      
        public static readonly string jquery_1_8_3_min_js = Url("jquery-1.8.3.min.js");
        public static readonly string jquery_numeric_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/jquery.numeric.min.js") ? Url("jquery.numeric.min.js") : Url("jquery.numeric.js");
                      
        public static readonly string modernizr_2_5_3_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/modernizr-2.5.3.min.js") ? Url("modernizr-2.5.3.min.js") : Url("modernizr-2.5.3.js");
                      
        public static readonly string site_js = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/site.min.js") ? Url("site.min.js") : Url("site.js");
                      
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static class Content {
        private const string URLPATH = "~/Content";
        public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
        public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
        public static readonly string bootstrap_datetimepicker_min_css = Url("bootstrap-datetimepicker.min.css");
        public static readonly string bootstrap_responsive_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap-responsive.min.css") ? Url("bootstrap-responsive.min.css") : Url("bootstrap-responsive.css");
             
        public static readonly string bootstrap_responsive_min_css = Url("bootstrap-responsive.min.css");
        public static readonly string bootstrap_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.min.css") ? Url("bootstrap.min.css") : Url("bootstrap.css");
             
        public static readonly string bootstrap_min_css = Url("bootstrap.min.css");
        public static readonly string bootstrap_mod_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/bootstrap.mod.min.css") ? Url("bootstrap.mod.min.css") : Url("bootstrap.mod.css");
             
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class images {
            private const string URLPATH = "~/Content/images";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string glyphicons_halflings_white_png = Url("glyphicons-halflings-white.png");
            public static readonly string glyphicons_halflings_png = Url("glyphicons-halflings.png");
            public static readonly string loader_gif = Url("loader.gif");
            public static readonly string logo_png = Url("logo.png");
            public static readonly string ui_bg_flat_0_aaaaaa_40x100_png = Url("ui-bg_flat_0_aaaaaa_40x100.png");
            public static readonly string ui_bg_flat_55_fbec88_40x100_png = Url("ui-bg_flat_55_fbec88_40x100.png");
            public static readonly string ui_bg_glass_75_d0e5f5_1x400_png = Url("ui-bg_glass_75_d0e5f5_1x400.png");
            public static readonly string ui_bg_glass_85_dfeffc_1x400_png = Url("ui-bg_glass_85_dfeffc_1x400.png");
            public static readonly string ui_bg_glass_95_fef1ec_1x400_png = Url("ui-bg_glass_95_fef1ec_1x400.png");
            public static readonly string ui_bg_gloss_wave_55_5c9ccc_500x100_png = Url("ui-bg_gloss-wave_55_5c9ccc_500x100.png");
            public static readonly string ui_bg_inset_hard_100_f5f8f9_1x100_png = Url("ui-bg_inset-hard_100_f5f8f9_1x100.png");
            public static readonly string ui_bg_inset_hard_100_fcfdfd_1x100_png = Url("ui-bg_inset-hard_100_fcfdfd_1x100.png");
            public static readonly string ui_icons_217bc0_256x240_png = Url("ui-icons_217bc0_256x240.png");
            public static readonly string ui_icons_2e83ff_256x240_png = Url("ui-icons_2e83ff_256x240.png");
            public static readonly string ui_icons_469bdd_256x240_png = Url("ui-icons_469bdd_256x240.png");
            public static readonly string ui_icons_6da8d5_256x240_png = Url("ui-icons_6da8d5_256x240.png");
            public static readonly string ui_icons_cd0a0a_256x240_png = Url("ui-icons_cd0a0a_256x240.png");
            public static readonly string ui_icons_d8e7f3_256x240_png = Url("ui-icons_d8e7f3_256x240.png");
            public static readonly string ui_icons_f9bd01_256x240_png = Url("ui-icons_f9bd01_256x240.png");
        }
    
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static class less {
            private const string URLPATH = "~/Content/less";
            public static string Url() { return T4MVCHelpers.ProcessVirtualPath(URLPATH); }
            public static string Url(string fileName) { return T4MVCHelpers.ProcessVirtualPath(URLPATH + "/" + fileName); }
            public static readonly string activities_less = Url("activities.less");
            public static readonly string activities_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/activities.min.css") ? Url("activities.min.css") : Url("activities.css");
                 
            public static readonly string activities_min_css = Url("activities.min.css");
            public static readonly string activity_less = Url("activity.less");
            public static readonly string activity_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/activity.min.css") ? Url("activity.min.css") : Url("activity.css");
                 
            public static readonly string activity_min_css = Url("activity.min.css");
            public static readonly string application_less = Url("application.less");
            public static readonly string application_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/application.min.css") ? Url("application.min.css") : Url("application.css");
                 
            public static readonly string application_min_css = Url("application.min.css");
            public static readonly string applications_less = Url("applications.less");
            public static readonly string codemirror_less = Url("codemirror.less");
            public static readonly string common_less = Url("common.less");
            public static readonly string common_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/common.min.css") ? Url("common.min.css") : Url("common.css");
                 
            public static readonly string common_min_css = Url("common.min.css");
            public static readonly string field_container_less = Url("field-container.less");
            public static readonly string footer_less = Url("footer.less");
            public static readonly string grid_less = Url("grid.less");
            public static readonly string jquery_ui_less = Url("jquery-ui.less");
            public static readonly string menu_less = Url("menu.less");
            public static readonly string section_less = Url("section.less");
            public static readonly string settings_less = Url("settings.less");
            public static readonly string setup_less = Url("setup.less");
            public static readonly string signin_less = Url("signin.less");
            public static readonly string styles_less = Url("styles.less");
            public static readonly string styles_css = T4MVCHelpers.IsProduction() && T4Extensions.FileExists(URLPATH + "/styles.min.css") ? Url("styles.min.css") : Url("styles.css");
                 
            public static readonly string styles_min_css = Url("styles.min.css");
            public static readonly string tabs_less = Url("tabs.less");
        }
    
    }

    [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
    public static partial class bundles
    {
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class scripts {}
        [GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
        public static partial class styles {}
    }
}

[GeneratedCode("T4MVC", "2.0"), DebuggerNonUserCode]
public static class T4MVCHelpers {
    // You can change the ProcessVirtualPath method to modify the path that gets returned to the client.
    // e.g. you can prepend a domain, or append a query string:
    //      return "http://localhost" + path + "?foo=bar";
    private static string ProcessVirtualPathDefault(string virtualPath) {
        // The path that comes in starts with ~/ and must first be made absolute
        string path = VirtualPathUtility.ToAbsolute(virtualPath);
        
        // Add your own modifications here before returning the path
        return path;
    }

    // Calling ProcessVirtualPath through delegate to allow it to be replaced for unit testing
    public static Func<string, string> ProcessVirtualPath = ProcessVirtualPathDefault;


    // Logic to determine if the app is running in production or dev environment
    public static bool IsProduction() { 
        return (HttpContext.Current != null && !HttpContext.Current.IsDebuggingEnabled); 
    }
}





#endregion T4MVC
#pragma warning restore 1591


